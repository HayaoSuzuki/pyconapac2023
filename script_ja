こんにちは。
Let's implement useless Python objectsという題目で発表します。

発表資料はGitHubにあります。
また、この部屋のTwitter、いやXのハッシュタグはこちらです。

自己紹介です。
Who am IをPythonicな日本語に翻訳すると「お前誰よ」となります。
名前はHayao Suzukiと言います。
漢字で書くとこうなります。
Twitter、いいえ、Xのアカウントはこちらです。
普段は、PyCon APAC 2023のゴールドスポンサーである、ビープラウドで働いています。
ここで、ビープラウドの紹介です。
connpass, the event site for building connections,
PyQ, the best way to learn Python online,
tracery, a documentation service for system development,
現在、絶賛採用中です。
一緒に働きましょう。

自己紹介の続きです。
最近、オライリージャパンから翻訳本を出版しました。
この本です。
持っていますか？
是非、Amazonや本屋さんで購入してください。

PyCon JPは4回目の登壇です。
大体、自分が好きなテーマを発表しています。

さて、今日のテーマは、Let's implement useless Python objectsです。
Let's implement useless Python objects
そうです、uselessなのです。

まずは、言葉の定義を確認しましょう。
uselessとはどういう意味か。
longman dictionary of contemporary englishから引用します。
not useful or effective in any way
unable or unwilling to do anything properly
なるほど、uselessはusefulの否定という意味なのですね。

しかし、私はここで皆様に問いたい。
uselessは本当にuselessなのでしょうか。
ここで、古代中国の思想家である荘子の人間世篇から引用します。
人間世を英語で言うと、human worldです。
人間がhuman, 世がworldに対応します。
人皆知有用之用 而莫知無用之用也
人皆有用の用を知れども、無用の用を知ることなきなり、と。
これは中国語です、昔の日本人はこれを日本語として読むための手法を開発しました。
英語に翻訳すると、
Everyone knows the usefulness of the useful, but no one knows the usefulness of the useless

つまり、何が言いたいか。
useless objectは役に立ちません、しかし、useless objectの作り方は役に立ちます。
荘子が言うように、役に立たないものでも役に立つのです。

ところで、useless Python objectsとは具体的に何でしょうか。
例えば、こういうものです。
LiarContainerオブジェクトは、実際に持っているオブジェクトを持っていないと言い、持っていないオブジェクトを持つと主張します。
便利ですね。

次の例はFibonacciSizedオブジェクトです。
len()関数でオブジェクトの要素数を求めると、50ではなく50番目のFibonacci数列を返します。
便利ですね。

もう1つ、ShuffledIterableです。
for文でイテレートすると、毎回ランダムな結果を返します。
便利ですね。

本発表におけるuseless Python objectとは何か、定義します。
Pythonicに動きますが、期待通りに動かないものをuselessとします。
ここで重要なのが、Pythonicである、です。
役に立たないとはいえ、そもそも動かない、構文エラーはダメです。
Pythonic、既存のPythonオブジェクトと調和する必要があります。

さて、Pythonの基本的なデータ構造はリスト、タプル、辞書、集合の4つです。
それぞれ、異なるデータ構造ですが、共通する要素もあります。
いずれも、len()関数で要素数を取得できます。
in演算子で要素があるかどうかを確認できます。
for演算子、でイテレートできます。
len, in, for, これらの演算と調和する自作オブジェクトはどうやって作るのでしょうか？

※このスライドいらないかも。実装も継承する必要ないかも。
その前に、便利な抽象基底クラスUselessを定義しておきます。
奇妙なデータ構造を実装するのですが、内部では

まず、in演算子からです。
自作のクラスをin演算子に対応させる場合、__contains__()メソッドを実装します。
また、in演算子に対応しているオブジェクトをContainerと呼びます。
LiarContainerは実際のin演算子の結果とは逆の結果を返すように実装しています。
このように、クラスには、大抵の演算子や関数に対応する特殊メソッドがあります。
対応する特殊メソッドを実装するだけで、uselessなオブジェクトもusefulなオブジェクトも簡単に実装出来ます。

次に、len関数です。
自作のクラスをlen関数に対応させる場合、__len__()特殊メソッドを実装します。
また、len関数に対応しているオブジェクトをSizedと呼びます。
FibonacciSizedはlen()関数でオブジェクトの要素数を求めると、50ではなく50番目のFibonacci数列を返します。
__len__()特殊メソッドは、最終的にintの値を返せばいいので、データ構造の要素数ではなくFibonacci数列の値を返しても問題ない訳です。そう、問題ありません。

続いてfor文です。
for文を実現する方法はいくつかありますが、今回は__iter__特殊メソッドを実装する方法を採用します。
__iter__特殊メソッドも、イテレータを返せばいいので、今回はシャッフルしていますが、例えば空のイテレータ、まったく関係のないオブジェクトのイテレータでもよいわけです。
for文に対応したオブジェクトをiterableと呼びます。
たとえ、空のイテレータしか返さないものでも、iterableです。

ここまで、in、len、for文に対応するオブジェクトを紹介しました。
PythonicなPythonオブジェクトを実装するには、inには__contains__、lenには__len__のように、Pythonのオブジェクトプロトコルを理解する必要があります。
Pythonの公式ドキュメントや、そうですね、Python Distilledを読むと理解できるようになります。買ってくださいね。

とはいえ、オブジェクトプロトコルを満たすクラスを0から実装するのは大変です。
そこで役に立つのがcollectoins.abcにある抽象基底クラスです。

ContainerやSized、IterableはそれぞれABCにある名前でもあります。端的に言えば、欲しいインタフェイスを満たすABCを継承すれば簡単にほしいクラスが実装出来ます。
間違っていれば、Pythonが教えてくれます。

そして、リスト、タプル、辞書、集合の共通するインタフェースがCollectionです。
Sized、Container、Iterableを満たすインタフェースをCollectionです。
先程のクラスを継承するだけで、Collectionが完成します。
多重継承が嫌な場合は、個別に特殊メソッドを実装しても構いません。

ここまでは基本編で、ここまででも面白いことができますが、リストやタプルに似ているものも作りたいですよね。
既存のデータ構造に対応するABCも用意されているので、自分だけのリストやタプルも実装出来ます

まずはタプルに近いデータ構造であるModularSequenceです。
先程、for文を実現するには複数の方法があるといいましたが、__iter__以外の方法として__getitem__を実装する方法があります。
ModularSequenceは、モジュラ計算を入れることで、無限に続く夢のような数列を実装しています。

このように存在しないはずの値も取得できます。
無限に続くので、count()やfor文だと無限ループになります。
やりましたね

辞書もMapping ABCを継承して、必要なメソッドを実装するだけです。
MisprintedDictionaryは、初期化の際にぐちゃぐちゃにします。
ぐちゃぐちゃだろうが、辞書としての機能は満たしています。
これは辞書です。元辞書ではありません。

実際に動かすとわかる通り、バラバラになっています。
ですが、これも辞書です。

集合もSet ABCを満たすように実装すればよいです。
__lt__特殊メソッドをぐちゃぐちゃにすることで包含関係が変なことになります。

集合としては変なことになってますが、データ構造としての辞書としては正しく実装されています。

やや駆け足でしたが、まとめます。
uselessなPythonオブジェクトを実装しました。
オブジェクトそのものは役に立ちませんが、その作り方は役に立ちます。
また、collections.abcを活用することで、より簡単に実装出来ます。
カギになるのはオブジェクトプロトコルです。
一度理解すれば、usefulからuselessまで自由自在です。
ご清聴ありがとうございました
